"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adapter_1 = require("../adapter");
const node_type_descriptions_1 = __importDefault(require("../utils/node-type-descriptions"));
const errors_1 = require("../../shared/errors");
class ElementsRetriever {
    constructor(globalSelectorTimeout, executeSelectorFn) {
        this._globalSelectorTimeout = globalSelectorTimeout;
        this._ensureElementsStartTime = adapter_1.adapter.nativeMethods.dateNow();
        this._ensureElementsPromise = adapter_1.adapter.PromiseCtor.resolve();
        this._executeSelectorFn = executeSelectorFn;
        this._elements = [];
    }
    push(selector, elementName) {
        this._ensureElementsPromise = this._ensureElementsPromise
            .then(() => {
            return this._executeSelectorFn(selector, {
                invisible: !elementName ? 'ActionElementIsInvisibleError' : {
                    name: 'ActionAdditionalElementIsInvisibleError',
                    firstArg: elementName,
                },
                notFound: !elementName ? 'ActionElementNotFoundError' : {
                    name: 'ActionAdditionalElementNotFoundError',
                    firstArg: elementName,
                },
            }, this._ensureElementsStartTime);
        })
            .then(el => {
            if (!adapter_1.adapter.isDomElement(el)) {
                const nodeType = el.nodeType;
                const nodeTypeStr = node_type_descriptions_1.default[nodeType];
                if (!elementName)
                    throw new errors_1.ActionSelectorMatchesWrongNodeTypeError(nodeTypeStr);
                else
                    throw new errors_1.ActionAdditionalSelectorMatchesWrongNodeTypeError(elementName, nodeTypeStr);
            }
            this._elements.push(el);
        });
    }
    getElements() {
        return this._ensureElementsPromise.then(() => this._elements);
    }
}
exports.default = ElementsRetriever;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudHMtcmV0cmlldmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NoYXJlZC91dGlscy9lbGVtZW50cy1yZXRyaWV2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3Q0FBcUM7QUFHckMsNkZBQXFFO0FBQ3JFLGdEQUc2QjtBQUc3QixNQUFxQixpQkFBaUI7SUFPbEMsWUFBb0IscUJBQTZCLEVBQUUsaUJBQXVDO1FBQ3RGLElBQUksQ0FBQyxzQkFBc0IsR0FBSyxxQkFBcUIsQ0FBQztRQUN0RCxJQUFJLENBQUMsd0JBQXdCLEdBQUcsaUJBQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDaEUsSUFBSSxDQUFDLHNCQUFzQixHQUFLLGlCQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzlELElBQUksQ0FBQyxrQkFBa0IsR0FBUyxpQkFBaUIsQ0FBQztRQUNsRCxJQUFJLENBQUMsU0FBUyxHQUFrQixFQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVNLElBQUksQ0FBRSxRQUFnQyxFQUFFLFdBQW9CO1FBQy9ELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsc0JBQXNCO2FBQ3BELElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDUCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUU7Z0JBQ3JDLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsK0JBQStCLENBQUMsQ0FBQyxDQUFDO29CQUN4RCxJQUFJLEVBQU0seUNBQXlDO29CQUNuRCxRQUFRLEVBQUUsV0FBVztpQkFDeEI7Z0JBQ0QsUUFBUSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7b0JBQ3BELElBQUksRUFBTSxzQ0FBc0M7b0JBQ2hELFFBQVEsRUFBRSxXQUFXO2lCQUN4QjthQUNKLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ1AsSUFBSSxDQUFDLGlCQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUMzQixNQUFNLFFBQVEsR0FBTyxFQUFzQyxDQUFDLFFBQVEsQ0FBQztnQkFDckUsTUFBTSxXQUFXLEdBQUcsZ0NBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRXJELElBQUksQ0FBQyxXQUFXO29CQUNaLE1BQU0sSUFBSSxnREFBdUMsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7b0JBRS9ELE1BQU0sSUFBSSwwREFBaUQsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7YUFDN0Y7WUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUVYLENBQUM7SUFFTSxXQUFXO1FBQ2QsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsRSxDQUFDO0NBQ0o7QUFoREQsb0NBZ0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRhcHRlciB9IGZyb20gJy4uL2FkYXB0ZXInO1xuaW1wb3J0IHsgRXhlY3V0ZVNlbGVjdG9yQ29tbWFuZCB9IGZyb20gJy4uLy4uL3Rlc3QtcnVuL2NvbW1hbmRzL29ic2VydmF0aW9uJztcbmltcG9ydCB7IEV4ZWN1dGVTZWxlY3RvckZuIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IE5PREVfVFlQRV9ERVNDUklQVElPTlMgZnJvbSAnLi4vdXRpbHMvbm9kZS10eXBlLWRlc2NyaXB0aW9ucyc7XG5pbXBvcnQge1xuICAgIEFjdGlvblNlbGVjdG9yTWF0Y2hlc1dyb25nTm9kZVR5cGVFcnJvcixcbiAgICBBY3Rpb25BZGRpdGlvbmFsU2VsZWN0b3JNYXRjaGVzV3JvbmdOb2RlVHlwZUVycm9yLFxufSBmcm9tICcuLi8uLi9zaGFyZWQvZXJyb3JzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVtZW50c1JldHJpZXZlcjxUPiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfZ2xvYmFsU2VsZWN0b3JUaW1lb3V0OiBudW1iZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfZW5zdXJlRWxlbWVudHNTdGFydFRpbWU6IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9leGVjdXRlU2VsZWN0b3JGbjogRXhlY3V0ZVNlbGVjdG9yRm48VD47XG4gICAgcHJpdmF0ZSByZWFkb25seSBfZWxlbWVudHM6IFRbXTtcbiAgICBwcml2YXRlIF9lbnN1cmVFbGVtZW50c1Byb21pc2U6IFByb21pc2U8dm9pZD47XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGdsb2JhbFNlbGVjdG9yVGltZW91dDogbnVtYmVyLCBleGVjdXRlU2VsZWN0b3JGbjogRXhlY3V0ZVNlbGVjdG9yRm48VD4pIHtcbiAgICAgICAgdGhpcy5fZ2xvYmFsU2VsZWN0b3JUaW1lb3V0ICAgPSBnbG9iYWxTZWxlY3RvclRpbWVvdXQ7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUVsZW1lbnRzU3RhcnRUaW1lID0gYWRhcHRlci5uYXRpdmVNZXRob2RzLmRhdGVOb3coKTtcbiAgICAgICAgdGhpcy5fZW5zdXJlRWxlbWVudHNQcm9taXNlICAgPSBhZGFwdGVyLlByb21pc2VDdG9yLnJlc29sdmUoKTtcbiAgICAgICAgdGhpcy5fZXhlY3V0ZVNlbGVjdG9yRm4gICAgICAgPSBleGVjdXRlU2VsZWN0b3JGbjtcbiAgICAgICAgdGhpcy5fZWxlbWVudHMgICAgICAgICAgICAgICAgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcHVzaCAoc2VsZWN0b3I6IEV4ZWN1dGVTZWxlY3RvckNvbW1hbmQsIGVsZW1lbnROYW1lPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUVsZW1lbnRzUHJvbWlzZSA9IHRoaXMuX2Vuc3VyZUVsZW1lbnRzUHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9leGVjdXRlU2VsZWN0b3JGbihzZWxlY3Rvciwge1xuICAgICAgICAgICAgICAgICAgICBpbnZpc2libGU6ICFlbGVtZW50TmFtZSA/ICdBY3Rpb25FbGVtZW50SXNJbnZpc2libGVFcnJvcicgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAgICAgJ0FjdGlvbkFkZGl0aW9uYWxFbGVtZW50SXNJbnZpc2libGVFcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdEFyZzogZWxlbWVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG5vdEZvdW5kOiAhZWxlbWVudE5hbWUgPyAnQWN0aW9uRWxlbWVudE5vdEZvdW5kRXJyb3InIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogICAgICdBY3Rpb25BZGRpdGlvbmFsRWxlbWVudE5vdEZvdW5kRXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RBcmc6IGVsZW1lbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sIHRoaXMuX2Vuc3VyZUVsZW1lbnRzU3RhcnRUaW1lKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihlbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFhZGFwdGVyLmlzRG9tRWxlbWVudChlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9kZVR5cGUgICAgPSAoZWwgYXMgdW5rbm93biBhcyB7IG5vZGVUeXBlOiBudW1iZXIgfSkubm9kZVR5cGU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVUeXBlU3RyID0gTk9ERV9UWVBFX0RFU0NSSVBUSU9OU1tub2RlVHlwZV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50TmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBY3Rpb25TZWxlY3Rvck1hdGNoZXNXcm9uZ05vZGVUeXBlRXJyb3Iobm9kZVR5cGVTdHIpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQWN0aW9uQWRkaXRpb25hbFNlbGVjdG9yTWF0Y2hlc1dyb25nTm9kZVR5cGVFcnJvcihlbGVtZW50TmFtZSwgbm9kZVR5cGVTdHIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRzLnB1c2goZWwpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RWxlbWVudHMgKCk6IFByb21pc2U8VFtdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbnN1cmVFbGVtZW50c1Byb21pc2UudGhlbigoKSA9PiB0aGlzLl9lbGVtZW50cyk7XG4gICAgfVxufVxuIl19